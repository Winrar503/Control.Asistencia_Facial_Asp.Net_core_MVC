@using Face.EntidadesDeNegocio

@{
    ViewData["Title"] = "Dashboard Mejorado";
}

<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dashboard Mejorado</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        body {
            background: #f7f8fc;
            color: #333;
            font-family: 'Poppins', sans-serif;
        }

        .dashboard-container {
            max-width: 1300px;
            margin: 0 auto;
            padding: 20px;
        }

        .dashboard-header {
            text-align: center;
            margin-bottom: 40px;
        }

            .dashboard-header h1 {
                font-size: 3rem;
                color: #4a90e2;
                font-weight: bold;
            }

            .dashboard-header p {
                font-size: 1.2rem;
                color: #666;
            }

        .metric-card {
            display: flex;
            align-items: center;
            justify-content: space-between;
            padding: 20px;
            border-radius: 15px;
            background: #fff;
            color: #333;
            border: 1px solid #e0e0e0;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
            transition: transform 0.3s ease, box-shadow 0.3s ease;
        }

            .metric-card:hover {
                transform: translateY(-5px);
                box-shadow: 0 10px 20px rgba(0, 0, 0, 0.2);
            }

            .metric-card h5 {
                font-size: 1.3rem;
                font-weight: bold;
            }

            .metric-card p {
                font-size: 2rem;
                font-weight: bold;
            }

        .metric-icon {
            font-size: 3rem;
            color: #4a90e2;
        }

        .chart-container {
            padding: 20px;
            background: #fff;
            border-radius: 15px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
            border: 1px solid #e0e0e0;
        }

        .chart-title {
            font-size: 1.2rem;
            font-weight: bold;
            margin-bottom: 15px;
            color: #4a90e2;
        }

        .table-container {
            padding: 20px;
            background: #fff;
            border-radius: 15px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
            border: 1px solid #e0e0e0;
        }

        .btn-modern {
            padding: 10px 20px;
            font-size: 1rem;
            font-weight: bold;
            border-radius: 20px;
            background: #4a90e2;
            color: #fff;
            border: none;
            transition: transform 0.3s ease, box-shadow 0.3s ease;
            box-shadow: 0 5px 15px rgba(74, 144, 226, 0.4);
        }

            .btn-modern:hover {
                transform: scale(1.05);
                box-shadow: 0 8px 20px rgba(74, 144, 226, 0.6);
            }

        .action-buttons {
            text-align: center;
            margin: 30px 0;
        }

        table {
            color: #333;
        }

            table thead {
                background: #4a90e2;
                color: #fff;
            }
    </style>
</head>
<body>

    <div class="dashboard-container">
        <!-- Header -->
        <div class="dashboard-header">
            <h1>Informacion General</h1>
            <p>Controla tu plataforma con datos y gráficos dinámicos.</p>
        </div>

        <!-- Métricas Principales -->
        <div class="row text-center mb-5">
            <div class="col-md-3">
                <a asp-controller="Empleados" asp-action="Index" class="text-decoration-none">
                <div class="metric-card">
                    <div>
                        <h5>Total de Empleados</h5>
                        <p id="totalEmpleados">0</p>
                    </div>
                    <i class="fas fa-users metric-icon"></i>
                </div>
                </a>
            </div>
            <div class="col-md-3">
                <a asp-controller="Asistencias" asp-action="Index" class="text-decoration-none">
                <div class="metric-card">
                    <div>
                        <h5>Total de Asistencias</h5>
                        <p id="totalAsistencias">0</p>
                    </div>
                    <i class="fas fa-check-circle metric-icon"></i>
                </div>
                </a>
            </div>
            <div class="col-md-3">
                <div class="metric-card">
                     <a asp-controller="Asistencias" asp-action="Index" class="text-decoration-none">
                    <div>
                        <h5>Comentarios Registrados</h5>
                        <p id="totalComentarios">0</p>
                    </div>
                    </a>
                    <i class="fas fa-comment-alt metric-icon"></i>
                </div>
            </div>
            <div class="col-md-3">
                <a asp-controller="Cargos" asp-action="Index" class="text-decoration-none">
                <div class="metric-card">
                    <div>
                        <h5>Total de Cargos</h5>
                        <p id="totalCargos">0</p>
                    </div>
                    <i class="fas fa-briefcase metric-icon"></i>
                </div>
                </a>
            </div>
        </div>

        <!-- Botones de Acción -->
        <div class="action-buttons">
            <button class="btn-modern" onclick="mostrarReporte()">Ver Reporte Completo</button>
            <button class="btn-modern" onclick="nuevaFuncionalidad()">Nueva Función</button>
        </div>

        <!-- Gráficos -->
        <div class="row mb-4">
            <div class="col-md-6">
                <div class="chart-container">
                    <div class="chart-title">Asistencias Mensuales</div>
                    <canvas id="asistenciasChart"></canvas>
                </div>
            </div>
            <div class="col-md-6">
                <div class="chart-container">
                    <div class="chart-title">Distribución de Empleados</div>
                    <canvas id="empleadosChart"></canvas>
                </div>
            </div>
        </div>

        <!-- Tabla de Registros de Comentarios -->
        <div class="table-container mt-3">
            <h4 class="mb-4">Tabla de Comentarios</h4>
            <table class="table table-striped table-hover">
                <thead>
                    <tr>
                        <th>Empleado</th>
                        <th>Comentario</th>
                    </tr>
                </thead>
                <tbody id="tablaComentarios">
                    <tr>
                        <td colspan="2" class="text-center">Cargando comentarios...</td>
                    </tr>
                </tbody>

            </table>
        </div>
    </div>

    <script>

        async function obtenerDatos() {
            try {
                // Métricas principales
                const metricsResponse = await fetch('/Home/GetDashboardMetrics');
                const metrics = await metricsResponse.json();

                document.getElementById('totalEmpleados').innerText = metrics.totalEmpleados;
                document.getElementById('totalAsistencias').innerText = metrics.totalAsistencias;
                document.getElementById('totalCargos').innerText = metrics.totalCargos;
                document.getElementById('totalComentarios').innerText = metrics.totalComentarios;

                // Asistencias Mensuales
                const asistenciasResponse = await fetch('/Home/GetAsistenciasMensuales');
                const asistenciasMensuales = await asistenciasResponse.json();
                actualizarAsistenciasChart(asistenciasMensuales);

                // Distribución de Empleados
                const empleadosResponse = await fetch('/Home/GetDistribucionEmpleados');
                const distribucionEmpleados = await empleadosResponse.json();
                actualizarEmpleadosChart(distribucionEmpleados);
            } catch (error) {
                console.error('Error al obtener datos:', error);
            }
        }

        function actualizarAsistenciasChart(data) {
            const ctx1 = document.getElementById('asistenciasChart').getContext('2d');
            new Chart(ctx1, {
                type: 'bar',
                data: {
                    labels: ['Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo', 'Junio', 'Julio', 'Agosto', 'Septiembre', 'Octubre', 'Noviembre', 'Diciembre'],
                    datasets: [{
                        label: 'Asistencias',
                        data: data,
                        backgroundColor: '#4a90e2',
                        borderColor: '#307ed1',
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    scales: {
                        y: { beginAtZero: true }
                    }
                }
            });
        }

        function actualizarEmpleadosChart(data) {
            const ctx2 = document.getElementById('empleadosChart').getContext('2d');
            new Chart(ctx2, {
                type: 'doughnut',
                data: {
                    labels: Object.keys(data),
                    datasets: [{
                        data: Object.values(data),
                        backgroundColor: ['#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0', '#9966FF', '#FF9F40']
                    }]
                },
                options: {
                    responsive: true,
                    plugins: {
                        legend: {
                            position: 'top',
                        }
                    }
                }
            });
        }

        obtenerDatos();
        setInterval(obtenerDatos, 5000); // Actualizar cada 5 segundos


        function mostrarReporte() {
            alert('Función de reporte en desarrollo...');
        }

        function nuevaFuncionalidad() {
            alert('Nueva funcionalidad próximamente...');
        }

        obtenerDatos();
        setInterval(obtenerDatos, 5000);

        async function actualizarTablaComentarios() {
            try {
                const response = await fetch('/Home/ObtenerComentarios');
                const comentarios = await response.json();

                const tablaComentarios = document.getElementById('tablaComentarios');
                tablaComentarios.innerHTML = ''; // Limpiar tabla

                if (comentarios.length === 0) {
                    tablaComentarios.innerHTML = `<tr><td colspan="2" class="text-center">No hay comentarios disponibles</td></tr>`;
                } else {
                    comentarios.forEach(item => {
                        const fila = document.createElement('tr');
                        fila.innerHTML = `
                            <td>${item.Empleado || 'Desconocido'}</td>
                            <td>${item.Comentario || 'Sin comentario'}</td>
                        `;
                        tablaComentarios.appendChild(fila);
                    });
                }
            } catch (error) {
                console.error('Error al obtener los comentarios:', error);
                tablaComentarios.innerHTML = `<tr><td colspan="2" class="text-center">Error al cargar comentarios</td></tr>`;
            }
        }

    </script>

    </script>

</body>
</html>
