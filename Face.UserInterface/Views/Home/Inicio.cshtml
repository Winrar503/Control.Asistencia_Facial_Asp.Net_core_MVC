@using Face.EntidadesDeNegocio
@{
    ViewData["Title"] = "Dashboard Mejorado";
    var hayEmpleados = ViewBag.Cargos as bool? ?? false;
}
<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dashboard Mejorado</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/js/bootstrap.bundle.min.js"></script>


    <style>
        /* body {
            background: #f7f8fc;
            color: #333;
            font-family: 'Poppins', sans-serif;
        }

        .dashboard-container {
            max-width: 1300px;
            margin: 0 auto;
            padding: 20px;
        }

        .dashboard-header {
            text-align: center;
            margin-bottom: 40px;
        }

            .dashboard-header h1 {
                font-size: 3rem;
                color: #4a90e2;
                font-weight: bold;
            }

            .dashboard-header p {
                font-size: 1.2rem;
                color: #666;
            }

        .metric-card {
            display: flex;
            align-items: center;
            justify-content: space-between;
            padding: 20px;
            border-radius: 15px;
            background: #fff;
            color: #333;
            border: 1px solid #e0e0e0;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
            transition: transform 0.3s ease, box-shadow 0.3s ease;
        }

            .metric-card:hover {
                transform: translateY(-5px);
                box-shadow: 0 10px 20px rgba(0, 0, 0, 0.2);
            }

            .metric-card h5 {
                font-size: 1.3rem;
                font-weight: bold;
            }

            .metric-card p {
                font-size: 2rem;
                font-weight: bold;
            }

        .metric-icon {
            font-size: 3rem;
            color: #4a90e2;
        }

        .chart-container {
            padding: 20px;
            background: #fff;
            border-radius: 15px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
            border: 1px solid #e0e0e0;
        }

        .chart-title {
            font-size: 1.2rem;
            font-weight: bold;
            margin-bottom: 15px;
            color: #4a90e2;
        }

        .table-container {
            padding: 20px;
            background: #fff;
            border-radius: 15px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
            border: 1px solid #e0e0e0;
        }

        .btn-modern {
            padding: 10px 20px;
            font-size: 1rem;
            font-weight: bold;
            border-radius: 20px;
            background: #4a90e2;
            color: #fff;
            border: none;
            transition: transform 0.3s ease, box-shadow 0.3s ease;
            box-shadow: 0 5px 15px rgba(74, 144, 226, 0.4);
        }

            .btn-modern:hover {
                transform: scale(1.05);
                box-shadow: 0 8px 20px rgba(74, 144, 226, 0.6);
            }

        .action-buttons {
            text-align: center;
            margin: 30px 0;
        }

        table {
            color: #333;
        }

            table thead {
                background: #4a90e2;
                color: #fff;
            } */
        /* Diseño existente */
        body {
            background: #f7f8fc;
            color: #333;
            font-family: 'Poppins', sans-serif;
        }

        .dashboard-container {
            max-width: 1300px;
            margin: 0 auto;
            padding: 20px;
        }

        .dashboard-header {
            text-align: center;
            margin-bottom: 40px;
        }

            .dashboard-header h1 {
                font-size: 3rem;
                color: #4a90e2;
                font-weight: bold;
            }

            .dashboard-header p {
                font-size: 1.2rem;
                color: #666;
            }

        .metric-card {
            display: flex;
            align-items: center;
            justify-content: space-between;
            padding: 20px;
            border-radius: 15px;
            background: #fff;
            color: #333;
            border: 1px solid #e0e0e0;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
            transition: transform 0.3s ease, box-shadow 0.3s ease;
        }

            .metric-card:hover {
                transform: translateY(-5px);
                box-shadow: 0 10px 20px rgba(0, 0, 0, 0.2);
            }

            .metric-card h5 {
                font-size: 1.3rem;
                font-weight: bold;
            }

            .metric-card p {
                font-size: 2rem;
                font-weight: bold;
            }

        .metric-icon {
            font-size: 3rem;
            color: #4a90e2;
        }

        .chart-container {
            padding: 20px;
            background: #fff;
            border-radius: 15px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
            border: 1px solid #e0e0e0;
        }

        .chart-title {
            font-size: 1.2rem;
            font-weight: bold;
            margin-bottom: 15px;
            color: #4a90e2;
        }

        .table-container {
            padding: 20px;
            background: #fff;
            border-radius: 15px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
            border: 1px solid #e0e0e0;
        }

        .btn-modern {
            padding: 10px 20px;
            font-size: 1rem;
            font-weight: bold;
            border-radius: 20px;
            background: #4a90e2;
            color: #fff;
            border: none;
            transition: transform 0.3s ease, box-shadow 0.3s ease;
            box-shadow: 0 5px 15px rgba(74, 144, 226, 0.4);
        }

            .btn-modern:hover {
                transform: scale(1.05);
                box-shadow: 0 8px 20px rgba(74, 144, 226, 0.6);
            }

        .action-buttons {
            text-align: center;
            margin: 30px 0;
        }

        table {
            color: #333;
        }

            table thead {
                background: #4a90e2;
                color: #fff;
            }

        /* Nuevos estilos para el botón flotante del chat */
        .chat-button-container {
            position: fixed;
            bottom: 20px;
            right: 20px;
            z-index: 1000;
        }

        ul {
            position: relative;
            display: flex;
            gap: 25px;
        }

            ul li {
                position: relative;
                list-style: none;
                width: 60px;
                height: 60px;
                background: #fff;
                border-radius: 60px;
                cursor: pointer;
                display: flex;
                justify-content: center;
                align-items: center;
                box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
                transition: 0.5s;
            }

                ul li:hover {
                    width: 180px;
                    box-shadow: 0 10px 25px rgba(0, 0, 0, 0);
                }

                ul li::before {
                    content: "";
                    position: absolute;
                    inset: 0;
                    border-radius: 60px;
                    background: linear-gradient(45deg, #56CCF2, #2F80ED);
                    opacity: 0;
                    transition: 0.5s;
                }

                ul li:hover::before {
                    opacity: 1;
                }

                ul li::after {
                    content: "";
                    position: absolute;
                    top: 10px;
                    width: 100%;
                    height: 100%;
                    border-radius: 60px;
                    background: linear-gradient(45deg, #56CCF2, #2F80ED);
                    transition: 0.5s;
                    filter: blur(15px);
                    z-index: -1;
                    opacity: 0;
                }

                ul li:hover::after {
                    opacity: 0.5;
                }

                ul li .icon {
                    color: #777;
                    font-size: 1.75em;
                    transition: 0.5s;
                    transition-delay: 0.25s;
                }

                ul li:hover .icon {
                    transform: scale(0);
                    color: #fff;
                    transition-delay: 0s;
                }

                ul li span {
                    position: absolute;
                }

                ul li .title {
                    color: #fff;
                    font-size: 1.1em;
                    text-transform: uppercase;
                    letter-spacing: 0.1em;
                    transform: scale(0);
                    transition: 0.5s;
                    transition-delay: 0s;
                }

                ul li:hover .title {
                    transform: scale(1);
                    transition-delay: 0.25s;
                }

        /* Nuevos estilos para el modal de chat */
        .card-container {
            background-color: #fff;
            border-radius: 10px;
            padding: 15px;
            display: flex;
            flex-direction: column;
            width: 100%;
            max-width: 400px;
            margin: auto;
        }

        .card-header {
            display: flex;
            align-items: center;
            padding-bottom: 10px;
            border-bottom: 1px solid #ccc;
        }

            .card-header .img-avatar {
                width: 50px;
                height: 50px;
                border-radius: 50%;
                margin-right: 20px;
                background-color: #333;
            }

            .card-header .text-chat {
                color: black;
                font-size: 20px;
            }

        .card-body {
            flex: 1;
            overflow-y: auto;
            max-height: 300px;
        }

        .messages-container {
            padding: 15px;
        }

        .message-box {
            padding: 10px;
            margin-bottom: 5px;
            border-radius: 10px;
        }

            .message-box.left {
                background-color: #f1f1f1;
                color: black;
            }

            .message-box.right {
                background-color: #333;
                color: #fff;
            }

        .message-input {
            display: flex;
            align-items: center;
            gap: 10px;
            padding: 10px;
            border-top: 1px solid #ccc;
        }

            .message-input .message-send {
                flex: 1;
                padding: 10px;
                border: none;
                border-radius: 10px;
            }

            .message-input .button-send {
                background-color: #333;
                color: #fff;
                padding: 10px 20px;
                border: none;
                cursor: pointer;
                border-radius: 10px;
                font-size: 13px;
            }

                .message-input .button-send:hover {
                    background-color: #f1f1f1;
                    color: #333;
                }

    </style>
</head>
<body>
    <div class="dashboard-container">

        <div class="dashboard-header">
            <h1>Informacion General</h1>
            <p>Controla tu plataforma con datos y gráficos dinámicos.</p>

        </div>
        <div class="row text-center mb-5">
            <div class="col-md-3">
                <a asp-controller="Empleados" asp-action="Index" class="text-decoration-none">
                    <div class="metric-card">
                        <div>
                            <h5>Total de Empleados</h5>
                            <p id="totalEmpleados">0</p>
                        </div>
                        <i class="fas fa-users metric-icon"></i>
                    </div>
                </a>
            </div>
            <div class="col-md-3">
                <a asp-controller="Asistencias" asp-action="Index" class="text-decoration-none">
                    <div class="metric-card">
                        <div>
                            <h5>Total de Asistencias</h5>
                            <p id="totalAsistencias">0</p>
                        </div>
                        <i class="fas fa-check-circle metric-icon"></i>
                    </div>
                </a>
            </div>
            <div class="col-md-3">
                <div class="metric-card">
                    <a asp-controller="Asistencias" asp-action="Index" class="text-decoration-none">
                        <div>
                            <h5>Comentarios Registrados</h5>
                            <p id="totalComentarios">0</p>
                        </div>
                    </a>
                    <i class="fas fa-comment-alt metric-icon"></i>
                </div>
            </div>
            <div class="col-md-3">
                <a asp-controller="Cargos" asp-action="Index" class="text-decoration-none">
                    <div class="metric-card">
                        <div>
                            <h5>Total de Cargos</h5>
                            <p id="totalCargos">0</p>
                        </div>
                        <i class="fas fa-briefcase metric-icon"></i>
                    </div>
                </a>
            </div>
        </div>
        <div class="action-buttons">
            <button class="btn-modern" onclick="window.location.href='/ReporteGeneral'">Ver Reporte Completo</button>
            <button class="btn-modern" onclick="window.location.href='/Home/Manual'">Ver Manual</button>
        </div>






        <div class="chat-button-container">
            <ul>
                <li onclick="abrirChat()" style="--i:#56CCF2;--j:#2F80ED;">
                    <span class="icon">💬</span>
                    <span class="title">Chat</span>
                </li>
            </ul>
        </div>

        <!-- Modal del Chat -->
        <div class="modal fade" id="chatModal" tabindex="-1" aria-labelledby="chatModalLabel" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered">
                <div class="modal-content">
                    <div class="card-container">
                        <div class="card-header">
                            <div class="img-avatar"></div>
                            <div class="text-chat">Consulta Interactiva</div>
                        </div>
                        <div class="card-body">
                            <div class="messages-container" id="chatBox"></div>
                            <div class="message-input">
                                <textarea id="chatInput" class="message-send" placeholder="Escribe tu pregunta..."></textarea>
                                <button class="button-send" onclick="enviarPregunta()">Enviar</button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="row mb-4">
            <div class="col-md-6">
                <div class="chart-container">
                    <div class="chart-title">Asistencias Mensuales</div>
                    <canvas id="asistenciasChart"></canvas>
                </div>
            </div>
            <div class="col-md-6">
                <div class="chart-container">
                    <div class="chart-title">Distribución de Cargos</div>
                    <canvas id="empleadosChart"></canvas>
                </div>
            </div>
        </div>
        <div class="table-container mt-3">
            <h4 class="mb-4">Tabla de Comentarios</h4>
            <table class="table table-striped table-hover">
                <thead>
                    <tr>
                        <th>Empleado</th>
                        <th>Comentario</th>
                    </tr>
                </thead>
                <tbody id="tablaComentarios">
                    <tr>
                        <td colspan="2" class="text-center">Cargando comentarios...</td>
                    </tr>
                </tbody>

            </table>
        </div>
    </div>
    <script>
        function abrirChat() {
            const chatModal = new bootstrap.Modal(document.getElementById('chatModal'));
            chatModal.show();
        }

        async function enviarPregunta() {
            const pregunta = document.getElementById('chatInput').value.trim();
            if (!pregunta) {
                alert('Por favor escribe una pregunta.');
                return;
            }

            const chatBox = document.getElementById('chatBox');
            chatBox.innerHTML += `<div class="message-box left"><p>${pregunta}</p></div>`;

            try {
                const response = await fetch('/Chat/ProcesarPregunta', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(pregunta)
                });

                if (response.ok) {
                    const data = await response.json();
                    chatBox.innerHTML += `<div class="message-box right"><p>${data.Respuesta}</p></div>`;
                } else {
                    chatBox.innerHTML += `<div class="message-box right"><p>Error en el servidor.</p></div>`;
                }
            } catch (error) {
                chatBox.innerHTML += `<div class="message-box right"><p>Error al conectarse al servidor.</p></div>`;
            }

            chatBox.scrollTop = chatBox.scrollHeight;
            document.getElementById('chatInput').value = '';
        }
        document.addEventListener('DOMContentLoaded', async function () {
            try {
                const empleadosResponse = await fetch('/Home/VerificarEmpleados');
                const empleadosData = await empleadosResponse.json();

                if (empleadosData.hayEmpleados) {
                    Swal.fire({
                        title: 'Empleados registrados detectados',
                        text: '¿Quieres comenzar el reconocimiento facial o tomar asistencias?',
                        icon: 'info',
                        showCancelButton: true,
                        confirmButtonText: 'Sí, comenzar',
                        cancelButtonText: 'Cancelar',
                        reverseButtons: true
                    }).then((result) => {
                        if (result.isConfirmed) {

                            window.location.href = '/Reconocimiento';
                        } else {
                            Swal.fire('Acción cancelada', 'Puedes iniciar manualmente cuando lo desees.', 'info');
                        }
                    });
                } else {
                    Swal.fire({
                        title: '¡Atención!',
                        text: 'No hay empleados registrados. Por favor, registra empleados para comenzar.',
                        icon: 'warning',
                        confirmButtonText: 'Registrar empleados',
                        showCancelButton: true,
                        cancelButtonText: 'Cerrar'
                    }).then((result) => {
                        if (result.isConfirmed) {

                            window.location.href = '/Empleados/Crear';
                        }
                    });
                }
                const metricsResponse = await fetch('/Home/GetDashboardMetrics');
                const metrics = await metricsResponse.json();
                const totalCargos = metrics.totalCargos || 0;

                if (totalCargos === 0) {
                    Swal.fire({
                        title: '¡Atención!',
                        text: 'No hay cargos registrados. Para poder crear empleados, debes registrar primero cargos.',
                        icon: 'warning',
                        showCancelButton: true,
                        confirmButtonText: 'Crear Cargo',
                        cancelButtonText: 'Aceptar'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            window.location.href = '/Cargos/Index';
                        }
                    });
                }
            } catch (error) {
                console.error('Error al verificar los datos:', error);
                Swal.fire('Error', 'Ocurrió un problema al cargar los datos del sistema.', 'error');
            }
        });
        async function obtenerDatos() {
            try {
                const metricsResponse = await fetch('/Home/GetDashboardMetrics');
                const metrics = await metricsResponse.json();

                document.getElementById('totalEmpleados').innerText = metrics.totalEmpleados;
                document.getElementById('totalAsistencias').innerText = metrics.totalAsistencias;
                document.getElementById('totalCargos').innerText = metrics.totalCargos;
                document.getElementById('totalComentarios').innerText = metrics.totalComentarios;

                const asistenciasResponse = await fetch('/Home/GetAsistenciasMensuales');
                const asistenciasMensuales = await asistenciasResponse.json();
                actualizarAsistenciasChart(asistenciasMensuales);

                const empleadosResponse = await fetch('/Home/GetDistribucionEmpleados');
                const distribucionEmpleados = await empleadosResponse.json();
                actualizarEmpleadosChart(distribucionEmpleados);
            } catch (error) {
                console.error('Error al obtener datos:', error);
            }
        }

        function actualizarAsistenciasChart(data) {
            const ctx1 = document.getElementById('asistenciasChart').getContext('2d');
            new Chart(ctx1, {
                type: 'bar',
                data: {
                    labels: ['Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo', 'Junio', 'Julio', 'Agosto', 'Septiembre', 'Octubre', 'Noviembre', 'Diciembre'],
                    datasets: [{
                        label: 'Asistencias',
                        data: data,
                        backgroundColor: '#4a90e2',
                        borderColor: '#307ed1',
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    scales: {
                        y: { beginAtZero: true }
                    }
                }
            });
        }
        function actualizarEmpleadosChart(data) {
            const ctx2 = document.getElementById('empleadosChart').getContext('2d');

            const colorPalette = [
                '#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0', '#9966FF', '#FF9F40',
                '#F77737', '#C2185B', '#00BCD4', '#8E44AD', '#2ECC71', '#E74C3C'
            ];
            const labels = Object.keys(data);
            const values = Object.values(data);
            const colors = labels.map((_, index) => colorPalette[index % colorPalette.length]);
            console.log("Datos para la gráfica de empleados:", { labels, values, colors });
            if (window.empleadosChartInstance) {
                window.empleadosChartInstance.destroy();
            }
            window.empleadosChartInstance = new Chart(ctx2, {
                type: 'doughnut',
                data: {
                    labels: labels,
                    datasets: [{
                        data: values,
                        backgroundColor: colors,
                        hoverOffset: 4
                    }]
                },
                options: {
                    responsive: true,
                    plugins: {
                        legend: {
                            position: 'top',
                        },
                        tooltip: {
                            callbacks: {
                                label: function (tooltipItem) {
                                    const cargo = tooltipItem.label;
                                    const empleados = tooltipItem.raw;
                                    return `${cargo}: ${empleados} empleados`;
                                }
                            }
                        }
                    }
                }
            });
        }
        obtenerDatos();
        setInterval(obtenerDatos, 5000);

        async function actualizarTablaComentarios() {
            try {
                const response = await fetch('/Home/ObtenerComentarios');
                const comentarios = await response.json();
                const tablaComentarios = document.getElementById('tablaComentarios');
                tablaComentarios.innerHTML = '';
                if (comentarios.length === 0) {
                    tablaComentarios.innerHTML = `<tr><td colspan="2" class="text-center">No hay comentarios disponibles</td></tr>`;
                } else {
                    comentarios.forEach(item => {
                        const fila = document.createElement('tr');
                        fila.innerHTML = `
                            <td>${item.Empleado || 'Desconocido'}</td>
                            <td>${item.Comentario || 'Sin comentario'}</td>
                        `;
                        tablaComentarios.appendChild(fila);
                    });
                }
            } catch (error) {
                console.error('Error al obtener los comentarios:', error);
                tablaComentarios.innerHTML = `<tr><td colspan="2" class="text-center">Error al cargar comentarios</td></tr>`;
            }
        }
    </script>
</body>
</html>
