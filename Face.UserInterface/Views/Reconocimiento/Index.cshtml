@* @{
    ViewData["Title"] = "Reconocimiento Facial";
}

<div class="container mt-5">

    <div class="text-center mb-5">
        <h1 class="display-4" style="color: #4A4A4A; font-family: 'Poppins', sans-serif; font-weight: 600;">
            Reconocimiento Facial
        </h1>
        <p class="text-muted" style="font-size: 1.2rem;">Detecta y reconoce empleados en tiempo real</p>
    </div>

    <div class="d-flex justify-content-center mb-4">
        <div class="video-card shadow-lg" style="position: relative; width: 700px; height: 500px; border-radius: 20px; overflow: hidden;">
            <video id="video" autoplay style="width: 100%; height: 100%; object-fit: cover;"></video>
            <canvas id="canvas" width="700" height="500" style="display: none;"></canvas>
            <div id="overlay" class="overlay d-flex flex-column align-items-center justify-content-center" style="display: none;">
                <h3 id="result" class="text-light" style="font-size: 1.8rem; font-weight: 500;"></h3>
            </div>
        </div>
    </div>

    <div id="loader" class="text-center" style="display: none;">
        <div class="spinner-border text-primary" role="status">
            <span class="sr-only">Loading...</span>
        </div>
        <p class="text-muted mt-2">Procesando reconocimiento...</p>
    </div>
</div>

<div id="comentarioContainer" class="container mt-5" style="display: none; max-width: 700px;">
    <div class="comment-card shadow p-4" style="border-radius: 15px; background: #ffffff;">
        <h3 class="text-dark" style="font-family: 'Poppins', sans-serif; font-weight: 600;">Comentario para <span id="empleadoReconocido" class="text-primary"></span></h3>
        <textarea id="comentario" class="form-control mt-3" placeholder="Escribe un comentario (opcional)" style="resize: none; height: 120px; border-radius: 10px; font-size: 1rem;"></textarea>
        <button id="guardarComentario" class="btn btn-primary mt-4 w-100" style="font-size: 1.2rem; font-weight: 500;">Guardar Comentario</button>
    </div>
</div>

@section Scripts {
    <script>
        const video = document.getElementById('video');
        const canvas = document.getElementById('canvas');
        const context = canvas.getContext('2d');
        const resultElement = document.getElementById('result');
        let empleadoReconocido = false;
        let nombreEmpleado = '';
        let timerId; 
        navigator.mediaDevices.getUserMedia({ video: true })
            .then(stream => video.srcObject = stream)
            .catch(err => console.error("Error al acceder a la cámara: ", err));

        function capturarYReconocer() {
            if (empleadoReconocido) return;

            context.drawImage(video, 0, 0, canvas.width, canvas.height);
            const dataUrl = canvas.toDataURL('image/png');
            reconocerEmpleado(dataUrl);
        }

        function reconocerEmpleado(imageBase64) {
            document.getElementById('loader').style.display = 'block';
            fetch('/Reconocimiento/IdentificarEmpleado', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(imageBase64)
            })
            .then(response => response.json())
            .then(data => {
                document.getElementById('loader').style.display = 'none';
                if (data.success) {
                    empleadoReconocido = true;
                    nombreEmpleado = data.empleado;
                    resultElement.innerHTML = `Empleado reconocido: ${nombreEmpleado}`;
                    document.getElementById('overlay').style.display = 'flex';
                    setTimeout(() => document.getElementById('overlay').style.display = 'none', 3000);
                    video.srcObject.getTracks().forEach(track => track.stop());
                    mostrarCampoComentario(nombreEmpleado);
                } else {
                    resultElement.innerHTML = `Error: ${data.message}`;
                    document.getElementById('overlay').style.display = 'flex';
                    setTimeout(() => document.getElementById('overlay').style.display = 'none', 3000);
                }
            })
            .catch(error => {
                document.getElementById('loader').style.display = 'none';
                console.error('Error:', error);
            });
        }

        function mostrarCampoComentario(empleado) {
            document.getElementById('comentarioContainer').style.display = 'block';
            document.getElementById('empleadoReconocido').innerText = empleado;

            timerId = setTimeout(() => {
                alert("No se detectó ningún comentario, redirigiendo a la página de empleados.");
                window.location.href = '/Empleados';
            }, 60000);
        }

           function enviarComentario() {
            const comentarioDto = {
                Empleado: nombreEmpleado,
                Comentario: document.getElementById('comentario').value
            };

            fetch('/Home/GuardarComentario', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(comentarioDto)
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    alert("Comentario guardado correctamente");
                    document.getElementById('comentarioContainer').style.display = 'none';
                    document.getElementById('comentario').value = '';
                    empleadoReconocido = false;
                    actualizarTablaComentarios();
                } else {
                    console.error("Error al guardar el comentario");
                }
            })
            .catch(error => console.error('Error:', error));
        }


        document.getElementById('guardarComentario').addEventListener('click', enviarComentario);

        setInterval(capturarYReconocer, 2000);
    </script>
    <style>
        body {
            background: #F4F6F9;
            font-family: 'Poppins', sans-serif;
        }

        .video-card {
            background: linear-gradient(135deg, #5B9DF2, #3D72B4);
            box-shadow: 0 8px 30px rgba(0, 0, 0, 0.2);
        }

        .overlay {
            background: rgba(0, 0, 0, 0.6);
        }

        .btn-primary {
            background: #3D72B4;
            border-color: #3D72B4;
            font-family: 'Poppins', sans-serif;
        }

            .btn-primary:hover {
                background: #2B5A8A;
            }

        .text-primary {
            color: #3D72B4 !important;
        }

        .comment-card {
            box-shadow: 0 8px 20px rgba(0, 0, 0, 0.1);
        }

        textarea:focus {
            border-color: #3D72B4;
            box-shadow: 0 0 5px rgba(61, 114, 180, 0.5);
        }

        .spinner-border {
            width: 3rem;
            height: 3rem;
        }
    </style>
}

 *@
@{
    ViewData["Title"] = "Reconocimiento Facial";
}

<div class="container mt-5">
    <div class="text-center mb-5">
        <h1 class="display-4" style="color: #4A4A4A; font-family: 'Poppins', sans-serif; font-weight: 600;">
            Reconocimiento Facial
        </h1>
        <p class="text-muted" style="font-size: 1.2rem;">Detecta y reconoce empleados en tiempo real</p>
    </div>

    <div class="d-flex justify-content-center">
        <div class="d-flex flex-row align-items-start gap-4">
            <!-- Video Card -->
            <div class="video-card shadow-lg" style="position: relative; width: 500px; height: 400px; border-radius: 20px; overflow: hidden;">
                <video id="video" autoplay style="width: 100%; height: 100%; object-fit: cover;"></video>
                <canvas id="canvas" width="500" height="400" style="display: none;"></canvas>
                <div id="overlay" class="overlay d-flex flex-column align-items-center justify-content-center" style="display: none;">
                    <h3 id="result" class="text-light" style="font-size: 1.8rem; font-weight: 500;"></h3>
                </div>
            </div>

            <!-- Comentario Section -->
            <div id="comentarioContainer" class="comment-card shadow p-4" style="border-radius: 15px; background: #ffffff; width: 300px;">
                <h3 class="text-dark mb-4" style="font-family: 'Poppins', sans-serif; font-weight: 600;">Comentario</h3>
                <h5 id="empleadoReconocido" class="text-primary mb-3" style="font-family: 'Poppins', sans-serif;">Empleado: N/A</h5>
                <textarea id="comentario" class="form-control mb-3" placeholder="Escribe un comentario (opcional)" style="resize: none; height: 120px; border-radius: 10px; font-size: 1rem;"></textarea>
                <button id="guardarComentario" class="btn btn-primary w-100" style="font-size: 1.2rem; font-weight: 500;">Guardar Comentario</button>
            </div>
        </div>
    </div>

    <div id="loader" class="text-center mt-5" style="display: none;">
        <div class="spinner-border text-primary" role="status">
            <span class="sr-only">Loading...</span>
        </div>
        <p class="text-muted mt-2">Procesando reconocimiento...</p>
    </div>
</div>

@section Scripts {
    <script>
        const video = document.getElementById('video');
        const canvas = document.getElementById('canvas');
        const context = canvas.getContext('2d');
        const resultElement = document.getElementById('result');
        const empleadoReconocidoElement = document.getElementById('empleadoReconocido');
        let empleadoReconocido = false;
        let nombreEmpleado = '';

        // Activar la cámara
        navigator.mediaDevices.getUserMedia({ video: true })
            .then(stream => video.srcObject = stream)
            .catch(err => console.error("Error al acceder a la cámara: ", err));

        function capturarYReconocer() {
            if (empleadoReconocido) return; // No procesar si ya se reconoció un empleado

            context.drawImage(video, 0, 0, canvas.width, canvas.height);
            const dataUrl = canvas.toDataURL('image/png');
            reconocerEmpleado(dataUrl);
        }

        function reconocerEmpleado(imageBase64) {
            document.getElementById('loader').style.display = 'block';
            fetch('/Reconocimiento/IdentificarEmpleado', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(imageBase64)
            })
            .then(response => response.json())
            .then(data => {
                document.getElementById('loader').style.display = 'none';
                if (data.success) {
                    empleadoReconocido = true;
                    nombreEmpleado = data.empleado;
                    resultElement.innerHTML = `Reconocido: ${nombreEmpleado}`;
                    resultElement.style.color = "limegreen";
                    document.getElementById('overlay').style.display = 'flex';
                    setTimeout(() => document.getElementById('overlay').style.display = 'none', 2000);
                    actualizarCampoComentario(nombreEmpleado);
                } else {
                    resultElement.innerHTML = `Error: ${data.message}`;
                    resultElement.style.color = "red";
                    document.getElementById('overlay').style.display = 'flex';
                    setTimeout(() => document.getElementById('overlay').style.display = 'none', 2000);
                }
            })
            .catch(error => {
                document.getElementById('loader').style.display = 'none';
                console.error('Error:', error);
            });
        }

        function actualizarCampoComentario(empleado) {
            empleadoReconocidoElement.innerText = `Empleado: ${empleado}`;
            document.getElementById('comentarioContainer').style.display = 'block';
        }

        function enviarComentario() {
            const comentarioDto = {
                Empleado: nombreEmpleado,
                Comentario: document.getElementById('comentario').value
            };

            fetch('/Home/GuardarComentario', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(comentarioDto)
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    alert("Comentario guardado correctamente");
                    document.getElementById('comentarioContainer').style.display = 'none';
                    document.getElementById('comentario').value = '';
                    empleadoReconocido = false; // Permitir nuevos reconocimientos
                } else {
                    alert("Error al guardar el comentario");
                }
            })
            .catch(error => console.error('Error:', error));
        }

        document.getElementById('guardarComentario').addEventListener('click', enviarComentario);

        // Intentar reconocimiento cada 2 segundos
        setInterval(capturarYReconocer, 2000);
    </script>

    <style>
        body {
            background: #F4F6F9;
            font-family: 'Poppins', sans-serif;
        }

        .video-card {
            background: linear-gradient(135deg, #5B9DF2, #3D72B4);
            box-shadow: 0 8px 30px rgba(0, 0, 0, 0.2);
        }

        .overlay {
            background: rgba(0, 0, 0, 0.6);
        }

        .btn-primary {
            background: #3D72B4;
            border-color: #3D72B4;
            font-family: 'Poppins', sans-serif;
        }

            .btn-primary:hover {
                background: #2B5A8A;
            }

        .text-primary {
            color: #3D72B4 !important;
        }

        .comment-card {
            box-shadow: 0 8px 20px rgba(0, 0, 0, 0.1);
        }

        textarea:focus {
            border-color: #3D72B4;
            box-shadow: 0 0 5px rgba(61, 114, 180, 0.5);
        }

        .spinner-border {
            width: 3rem;
            height: 3rem;
        }
    </style>
}
